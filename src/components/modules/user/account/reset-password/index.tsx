"use client";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import ReInput from "@/components/ui/ReInput";
import BackButton from "@/components/ui/BackButton";

// Validation Schema
const resetPasswordSchema = z
	.object({
		oldPassword: z.string().min(6, "ржкрзБрж░ржирзЛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржЕржирзНрждржд рзм ржЕржХрзНрж╖рж░рзЗрж░ рж╣рждрзЗ рж╣ржмрзЗ"),
		newPassword: z
			.string()
			.min(8, "ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржЕржирзНрждржд рзо ржЕржХрзНрж╖рж░рзЗрж░ рж╣рждрзЗ рж╣ржмрзЗ")
			.regex(/[A-Z]/, "ржХржоржкржХрзНрж╖рзЗ ржПржХржЯрж┐ ржмржбрж╝ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░ ржерж╛ржХрждрзЗ рж╣ржмрзЗ")
			.regex(/[a-z]/, "ржХржоржкржХрзНрж╖рзЗ ржПржХржЯрж┐ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░ ржерж╛ржХрждрзЗ рж╣ржмрзЗ")
			.regex(/[0-9]/, "ржХржоржкржХрзНрж╖рзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗ"),
		confirmPassword: z.string(),
	})
	.refine(data => data.newPassword === data.confirmPassword, {
		message: "ржжрзБржЗржЯрж┐ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржорзЗрж▓рзЗржирж┐",
		path: ["confirmPassword"],
	});

type ResetPasswordValues = z.infer<typeof resetPasswordSchema>;

const ResetPassword = () => {
	const {
		register,
		handleSubmit,
		formState: { errors, isSubmitting },
		reset,
	} = useForm<ResetPasswordValues>({
		resolver: zodResolver(resetPasswordSchema),
	});

	//  API Connect Here
	const onSubmit = async (values: ResetPasswordValues) => {
		try {
			console.log("ЁЯФР Password Change Request:", values);
			// await api.changePassword(values);

			toast.success("ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржпрж╝рзЗржЫрзЗ!");
			reset();
		} catch (error) {
			console.error(error);
			toast.error("ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржирзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
		}
	};

	return (
		<div className="max-w-md mx-auto mt-10 ">
			<BackButton />
			<div className="mt-2 bg-gray-900/60 border border-gray-700 rounded-2xl shadow-lg p-6">
				<h1 className="text-2xl font-bold text-center text-white mb-6">
					ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи
				</h1>

				<form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
					{/* Old Password */}
					<ReInput
						label="ржкрзБрж░ржирзЛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб"
						type="password"
						placeholder="ржкрзБрж░ржирзЛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж▓рж┐ржЦрзБржи"
						{...register("oldPassword")}
						error={errors.oldPassword?.message}
					/>

					{/* New Password */}
					<ReInput
						label="ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб"
						type="password"
						placeholder="ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж▓рж┐ржЦрзБржи"
						{...register("newPassword")}
						error={errors.newPassword?.message}
					/>

					{/* Confirm Password */}
					<ReInput
						label="ржирж┐рж╢рзНржЪрж┐ржд ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб"
						type="password"
						placeholder="ржЖржмрж╛рж░ ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж▓рж┐ржЦрзБржи"
						{...register("confirmPassword")}
						error={errors.confirmPassword?.message}
					/>

					<Button
						type="submit"
						disabled={isSubmitting}
						className="w-full mt-4 font-semibold">
						{isSubmitting ? "ржЖржкржбрзЗржЯ рж╣ржЪрзНржЫрзЗ..." : "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржЖржкржбрзЗржЯ ржХрж░рзБржи"}
					</Button>
				</form>
			</div>
		</div>
	);
};

export default ResetPassword;

"use client";

import { Button } from "@/components/ui/button";
import { useUser } from "@/context/UserContext";
import { transferFunds } from "@/services/InvestorService";
import { useState, useEffect } from "react";
import { toast } from "sonner";
// API ‡¶ï‡¶≤ ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

interface HistoryItem {
	type: "Main ‚Üí Wallet" | "Wallet ‚Üí Main";
	amt: number;
	time: string;
}

const DAILY_RATE = 0.0071;

export default function LuxentaWallet() {
	// user ‡¶è‡¶¨‡¶Ç settings ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
	const { user } = useUser(); // refetchUser ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

	// initialState ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá user ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
	// ‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ü‡¶Æ‡¶∞‡¶æ state-‡¶è ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø‡•§
	// ‡¶Ü‡¶∏‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá, ‡¶è‡¶ü‡¶ø user.investorInfo.walletBalance ‡¶è‡¶¨‡¶Ç luxentaWallet ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§
	const [mainBal, setMainBal] = useState(
		user?.investorInfo?.walletBalance || 15000
	);
	const [walletBal, setWalletBal] = useState(
		user?.investorInfo?.luxentaWallet || 0
	);

	// Loading state ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
	const [isLoading, setIsLoading] = useState(false);

	const [toWalletAmt, setToWalletAmt] = useState<number | "">("");
	const [toMainAmt, setToMainAmt] = useState<number | "">("");
	const [history, setHistory] = useState<HistoryItem[]>([]);
	const [lastCalc, setLastCalc] = useState<Date | null>(null);
	const [showHistory, setShowHistory] = useState(false);

	// User ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
	useEffect(() => {
		if (user) {
			setMainBal(user.investorInfo.walletBalance);
			setWalletBal(user.investorInfo.luxentaWallet);
		}
	}, [user]);

	// Simulate daily compound accrual on Wallet balance
	useEffect(() => {
		const now = new Date();
		if (!lastCalc) {
			setLastCalc(now);
			return;
		}
		const msPerDay = 24 * 60 * 60 * 1000;
		const days = Math.floor((now.getTime() - lastCalc.getTime()) / msPerDay);

		// ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶æ‡¶≠ ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï‡¶ü‡¶ø API-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§,
		// ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ UI-‡¶§‡ßá ‡¶∏‡¶ø‡¶Æ‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã‡•§
		if (days > 0 && walletBal > 0) {
			// Note: In a real app, this calculation should be verified
			// and often performed on the server.
			const newWalletBal = walletBal * Math.pow(1 + DAILY_RATE, days);
			setWalletBal(parseFloat(newWalletBal.toFixed(2))); // ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡¶ø‡¶Ç
			setLastCalc(now);
		}
	}, [walletBal, lastCalc]);

	const fmt = (n: number) =>
		`‡ß≥ ${n.toLocaleString(undefined, { maximumFractionDigits: 2 })}`;

	// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã)
	const animateValue = (
		start: number,
		end: number,
		setter: (val: number) => void
	) => {
		const duration = 500;
		const startTime = performance.now();
		function step(now: number) {
			const progress = Math.min((now - startTime) / duration, 1);
			setter(start + (end - start) * progress);
			if (progress < 1) requestAnimationFrame(step);
		}
		requestAnimationFrame(step);
	};

	const addHistory = (type: HistoryItem["type"], amt: number) => {
		const newItem: HistoryItem = {
			type,
			amt,
			time: new Date().toLocaleString(),
		};
		setHistory(prev => [newItem, ...prev]);
	};

	// üí∞ Main ‚Üí Wallet ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (API ‡¶ï‡¶≤ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá)
	const handleToWallet = async () => {
		const amt = Number(toWalletAmt);
		if (isLoading) return;

		if (!(amt > 0) || isNaN(amt)) {
			alert("‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®");
			return;
		}
		if (amt > mainBal) {
			alert("‡¶Æ‡ßá‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á");
			return;
		}

		setIsLoading(true);
		try {
			// API ‡¶ï‡¶≤
			const result = await transferFunds("wallet", amt);

			if (result.success) {
				// UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶ï‡¶∏‡ßá‡¶∏ ‡¶™‡ßá‡¶≤‡ßá
				toast.success(result.message || "‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!");

				// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
				animateValue(mainBal, mainBal - amt, setMainBal);
				animateValue(walletBal, walletBal + amt, setWalletBal);

				addHistory("Main ‚Üí Wallet", amt);
				setToWalletAmt("");
			} else {
				toast.error(`‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ${result.error}`);
			}
		} catch (error: any) {
			toast.error(error.message || "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
		} finally {
			setIsLoading(false);
		}
	};

	// üí∏ Wallet ‚Üí Main ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (API ‡¶ï‡¶≤ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá)
	const handleToMain = async () => {
		const amt = Number(toMainAmt);
		if (isLoading) return;  

		if (!(amt > 0) || isNaN(amt)) {
			alert("‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®");
			return;
		}
		if (amt > walletBal) {
			alert("Wallet-‡¶è ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á");
			return;
		}

		setIsLoading(true);
		try {
			// API ‡¶ï‡¶≤
			const result = await transferFunds("main", amt);

			if (result.success) {
				// UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶ï‡¶∏‡ßá‡¶∏ ‡¶™‡ßá‡¶≤‡ßá
				toast.success(result.message || "‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!");

				// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
				animateValue(walletBal, walletBal - amt, setWalletBal);
				animateValue(mainBal, mainBal + amt, setMainBal);

				addHistory("Wallet ‚Üí Main", amt);
				setToMainAmt("");
			} else {
				toast.error(`‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ${result.error}`);
			}
		} catch (error: any) {
			toast.error(error.message || "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
		} finally {
			setIsLoading(false);
		}
	};

	return (
		<main className="min-h-screen p-3 flex flex-col gap-3 bg-[radial-gradient(75%_60%_at_20%_20%,#101a33_0%,#0a0f1c_35%,#060a14_100%)] text-[#e6f1ff] font-sans">
			{/* Topbar */}
			<header className="flex justify-center items-center gap-3 p-2 font-bold bg-gradient-to-b from-[#6a5cff1f] to-[#00e5ff14] border-b border-white/18 rounded-lg relative">
				<h1 className="text-lg text-center">üíº Luxenta Wallet</h1>
			</header>

			<section className="flex flex-col gap-3 max-w-[680px] w-full mx-auto flex-1">
				{/* Balance Card */}
				<div className="bg-[#0a0f1c] border border-white/18 rounded-lg p-4 backdrop-blur-sm shadow-lg">
					<h3 className="text-center text-[#00e5ff] font-bold mb-2">
						‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏
					</h3>
					<div className="grid grid-cols-2 gap-3">
						<div className="border border-white/18 bg-white/6 rounded-lg p-3 text-center">
							<div className="text-xs text-[#9fb3c8]">‡¶Æ‡ßá‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏</div>
							<div className="text-lg font-bold text-[#00e5ff]">
								{fmt(mainBal)}
							</div>
						</div>
						<div className="border border-white/18 bg-white/6 rounded-lg p-3 text-center">
							<div className="text-xs text-[#9fb3c8]">Luxenta Wallet</div>
							<div className="text-lg font-bold text-[#00e5ff]">
								{fmt(walletBal)}
							</div>
						</div>
					</div>
					<div className="flex justify-between mt-2 text-xs text-[#9fb3c8]">
						<span>‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶æ‡¶≠: 0.71% (Compound)</span>
						<span>‡¶∂‡ßá‡¶∑ ‡¶π‡¶æ‡¶≤‡¶®‡¶æ‡¶ó‡¶æ‡¶¶: {lastCalc?.toLocaleString() || "‚Äî"}</span>
					</div>
					<p className="text-xs text-[#9fb3c8] text-center mt-1">
						üí° Wallet-‡¶è‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Æ‡ßá‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ü‡¶®‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
					</p>
				</div>

				{/* Main ‚Üí Wallet */}
				<div className="bg-[#0a0f1c] border border-white/18 rounded-lg p-4 backdrop-blur-sm shadow-lg">
					<h3 className="text-center text-[#00e5ff] font-bold mb-2">
						‡¶Æ‡ßá‡¶á‡¶® ‚Üí Wallet ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞
					</h3>
					<div className="flex gap-2">
						<input
							type="number"
							min={1}
							step={1}
							placeholder="‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ (‡ß≥)"
							value={toWalletAmt}
							onChange={e =>
								setToWalletAmt(
									e.target.value === "" ? "" : parseFloat(e.target.value)
								)
							}
							className="flex-1 p-2 rounded-lg border border-white/18 bg-white/8 text-[#e6f1ff]"
							disabled={isLoading} // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡ßü ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤
						/>
						<Button
							className="rounded-sm"
							onClick={handleToWallet}
							disabled={isLoading} // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡ßü ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤
						>
							{isLoading ? "‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "Wallet-‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®"}
						</Button>
					</div>
				</div>

				{/* Wallet ‚Üí Main */}
				<div className="bg-[#0a0f1c] border border-white/18 rounded-lg p-4 backdrop-blur-sm shadow-lg">
					<h3 className="text-center text-[#00e5ff] font-bold mb-2">
						Wallet ‚Üí ‡¶Æ‡ßá‡¶á‡¶® ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞
					</h3>
					<div className="flex gap-2">
						<input
							type="number"
							min={1}
							step={1}
							placeholder="‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ (‡ß≥)"
							value={toMainAmt}
							onChange={e =>
								setToMainAmt(
									e.target.value === "" ? "" : parseFloat(e.target.value)
								)
							}
							className="flex-1 p-2 rounded-lg border border-white/18 bg-white/8 text-[#e6f1ff]"
							disabled={isLoading} // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡ßü ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤
						/>
						<Button
							variant="secondary"
							className="rounded-sm"
							onClick={handleToMain}
							disabled={isLoading} // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡ßü ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤
						>
							{isLoading ? "‡¶´‡¶ø‡¶∞‡¶ø‡ßü‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶Æ‡ßá‡¶á‡¶®‡ßá ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶®"}
						</Button>
					</div>
				</div>

				{/* History Button */}
				<button className="btn mx-auto" onClick={() => setShowHistory(true)}>
					üìú ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø
				</button>

				{/* History Modal */}
				{showHistory && (
					<div
						className="fixed inset-0 bg-black/80 backdrop-blur-sm flex flex-col p-4 overflow-y-auto z-50"
						onClick={() => setShowHistory(false)}>
						<div className="flex justify-between items-center mb-4">
							<h3 className="text-white text-lg font-bold">
								üìù ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø
							</h3>
							<button
								className="text-white font-bold text-xl px-2"
								onClick={() => setShowHistory(false)}>
								&times;
							</button>
						</div>
						<div className="flex flex-col gap-2">
							{history.length === 0 ? (
								<p className="text-center text-[#9fb3c8]">
									‡¶ï‡ßã‡¶®‡¶ì ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§
								</p>
							) : (
								history.map((item, i) => (
									<div
										key={i}
										className={`flex justify-between items-center p-2 rounded-lg border border-white/18 ${
											item.type === "Main ‚Üí Wallet"
												? "bg-[#00bfff14]"
												: "bg-[#ffbf0014]"
										}`}>
										<span className="font-bold">{item.type}</span>
										<span>{fmt(item.amt)}</span>
										<span className="text-xs text-[#9fb3c8]">{item.time}</span>
									</div>
								))
							)}
						</div>
					</div>
				)}

				{/* Rules Card */}
				<div className="bg-[#0a0f1c] border border-white/18 rounded-lg p-4 backdrop-blur-sm shadow-lg">
					<h3 className="text-center text-[#00e5ff] font-bold mb-2">
						‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ
					</h3>
					<ul className="list-disc list-inside text-xs text-[#9fb3c8]">
						<li>‡¶≤‡¶æ‡¶≠ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® 0.71% ‡¶ï‡¶Æ‡ßç‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°</li>
						<li>‡¶≤‡¶æ‡¶≠ ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º: Luxenta Wallet (‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º)</li>
						<li>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶è‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏/‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶∞ ‡¶Ü‡¶ó‡ßá Wallet ‚Üí ‡¶Æ‡ßá‡¶á‡¶®</li>
					</ul>
					<p className="text-[10px] mt-1 text-[#9fb3c8]">
						‚ÑπÔ∏è ‡¶è‡¶á ‡¶™‡ßá‡¶ú ‡¶ñ‡ßã‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶æ‡¶≤‡¶®‡¶æ‡¶ó‡¶æ‡¶¶ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡¶§‡¶¶‡¶ø‡¶® ‡¶™‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶∏‡ßá‡¶á
						‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá Wallet ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶≤‡¶æ‡¶≠ ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡•§
					</p>
				</div>
			</section>
		</main>
	);
}
